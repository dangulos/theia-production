{"version":3,"sources":["webpack:///./node_modules/@theia/core/src/browser/browser-clipboard-service.ts","webpack:///./node_modules/@theia/core/src/browser/clipboard-service.ts","webpack:///./node_modules/@theia/core/src/browser/window/browser-window-module.ts","webpack:///./node_modules/@theia/core/src/browser/window/default-window-service.ts"],"names":[],"mappings":"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","file":"65.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { isFirefox } from './browser';\nimport { ClipboardService } from './clipboard-service';\nimport { ILogger } from '../common/logger';\nimport { MessageService } from '../common/message-service';\n\nexport interface NavigatorClipboard {\n    readText(): Promise<string>;\n    writeText(value: string): Promise<void>;\n}\nexport interface PermissionStatus {\n    state: 'granted' | 'prompt' | 'denied'\n}\nexport interface NavigatorPermissions {\n    query(options: { name: string }): Promise<PermissionStatus>\n}\n\n@injectable()\nexport class BrowserClipboardService implements ClipboardService {\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    async readText(): Promise<string> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-read');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-read permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                return await this.getClipboardAPI().readText();\n            } catch (e2) {\n                this.logger.error('Failed reading clipboard content.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return '';\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return '';\n        }\n        return this.getClipboardAPI().readText();\n    }\n\n    async writeText(value: string): Promise<void> {\n        let permission;\n        try {\n            permission = await this.queryPermission('clipboard-write');\n        } catch (e1) {\n            this.logger.error('Failed checking a clipboard-write permission.', e1);\n            // in FireFox, Clipboard API isn't gated with the permissions\n            try {\n                await this.getClipboardAPI().writeText(value);\n                return;\n            } catch (e2) {\n                this.logger.error('Failed writing to the clipboard.', e2);\n                if (isFirefox) {\n                    this.messageService.warn(`Clipboard API is not available.\n                    It can be enabled by 'dom.events.testing.asyncClipboard' preference on 'about:config' page. Then reload Theia.\n                    Note, it will allow FireFox getting full access to the system clipboard.`);\n                }\n                return;\n            }\n        }\n        if (permission.state === 'denied') {\n            // most likely, the user intentionally denied the access\n            this.messageService.warn(\"Access to the clipboard is denied. Check your browser's permission.\");\n            return;\n        }\n        return this.getClipboardAPI().writeText(value);\n    }\n\n    protected async queryPermission(name: string): Promise<PermissionStatus> {\n        if ('permissions' in navigator) {\n            return (<NavigatorPermissions>navigator['permissions']).query({ name: name });\n        }\n        throw new Error('Permissions API unavailable');\n    }\n\n    protected getClipboardAPI(): NavigatorClipboard {\n        if ('clipboard' in navigator) {\n            return (<NavigatorClipboard>navigator['clipboard']);\n        }\n        throw new Error('Async Clipboard API unavailable');\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2019 RedHat and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { MaybePromise } from '../common/types';\n\nexport const ClipboardService = Symbol('ClipboardService');\nexport interface ClipboardService {\n    readText(): MaybePromise<string>;\n    writeText(value: string): MaybePromise<void>;\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { WindowService } from '../../browser/window/window-service';\nimport { DefaultWindowService } from '../../browser/window/default-window-service';\nimport { FrontendApplicationContribution } from '../frontend-application';\nimport { ClipboardService } from '../clipboard-service';\nimport { BrowserClipboardService } from '../browser-clipboard-service';\n\nexport default new ContainerModule(bind => {\n    bind(DefaultWindowService).toSelf().inSingletonScope();\n    bind(WindowService).toService(DefaultWindowService);\n    bind(FrontendApplicationContribution).toService(DefaultWindowService);\n    bind(ClipboardService).to(BrowserClipboardService).inSingletonScope();\n});\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, named } from 'inversify';\nimport { CorePreferences } from '../core-preferences';\nimport { ContributionProvider } from '../../common/contribution-provider';\nimport { FrontendApplicationContribution, FrontendApplication } from '../frontend-application';\nimport { WindowService } from './window-service';\n\n@injectable()\nexport class DefaultWindowService implements WindowService, FrontendApplicationContribution {\n\n    protected frontendApplication: FrontendApplication;\n\n    @inject(CorePreferences)\n    protected readonly corePreferences: CorePreferences;\n\n    @inject(ContributionProvider)\n    @named(FrontendApplicationContribution)\n    protected readonly contributions: ContributionProvider<FrontendApplicationContribution>;\n\n    onStart(app: FrontendApplication): void {\n        this.frontendApplication = app;\n        window.addEventListener('beforeunload', event => {\n            if (!this.canUnload()) {\n                return this.preventUnload(event);\n            }\n        });\n    }\n\n    openNewWindow(url: string): undefined {\n        window.open(url, undefined, 'noopener');\n        return undefined;\n    }\n\n    canUnload(): boolean {\n        const confirmExit = this.corePreferences['application.confirmExit'];\n        if (confirmExit === 'never') {\n            return true;\n        }\n        for (const contribution of this.contributions.getContributions()) {\n            if (contribution.onWillStop) {\n                if (!!contribution.onWillStop(this.frontendApplication)) {\n                    return false;\n                }\n            }\n        }\n        return confirmExit !== 'always';\n    }\n\n    /**\n     * Ask the user to confirm if they want to unload the window. Prevent it if they do not.\n     * @param event The beforeunload event\n     */\n    protected preventUnload(event: BeforeUnloadEvent): string | void {\n        event.returnValue = '';\n        event.preventDefault();\n        return '';\n    }\n\n}\n"],"sourceRoot":""}