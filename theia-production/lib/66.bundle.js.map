{"version":3,"sources":["webpack:///./node_modules/itrmext/src/browser/itrmext-contribution.ts","webpack:///./node_modules/itrmext/src/browser/itrmext-frontend-module.ts","webpack:///./node_modules/itrmext/src/common/index.ts","webpack:///./node_modules/itrmext/src/common/protocol.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oGAA+C;AAC/C,mHAAmI;AACnI,sHAAsD;AACtD,kGAAsC;AAEzB,sBAAc,GAAG;IAC1B,EAAE,EAAE,iBAAiB;IACrB,KAAK,EAAE,2BAA2B;CACrC,CAAC;AAGF;IAEI,oCAC6C,cAA8B,EACjC,SAAoB;QADjB,mBAAc,GAAd,cAAc,CAAgB;QACjC,cAAS,GAAT,SAAS,CAAW;IAC1D,CAAC;IAEL,qDAAgB,GAAhB,UAAiB,QAAyB;QAA1C,iBAiBC;QAhBG;;;;;UAKE;QACF,QAAQ,CAAC,eAAe,CAAC,sBAAc,EAAE;YACrC,OAAO,EAAE;;;;gCACa,qBAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;;4BAArD,SAAS,GAAG,SAAyC;4BAC3D,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;4BACvB,IAAG,SAAS;gCACR,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;;gCAEnD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;;;;iBACpD;SACJ,CAAC,CAAC;IACP,CAAC;IAxBQ,0BAA0B;QADtC,sBAAU,EAAE;QAIJ,6BAAM,CAAC,uBAAc,CAAC;QACtB,6BAAM,CAAC,kBAAS,CAAC;yCADuC,uBAAc;OAHlE,0BAA0B,CAyBtC;IAAD,iCAAC;CAAA;AAzBY,gEAA0B;AA4BvC;IAAA;IAQA,CAAC;IANG,+CAAa,GAAb,UAAc,KAAwB;QAClC,KAAK,CAAC,kBAAkB,CAAC,qBAAW,CAAC,IAAI,EAAE;YACvC,SAAS,EAAE,sBAAc,CAAC,EAAE;YAC5B,KAAK,EAAE,sBAAc,CAAC,KAAK;SAC9B,CAAC,CAAC;IACP,CAAC;IAPQ,uBAAuB;QADnC,sBAAU,EAAE;OACA,uBAAuB,CAQnC;IAAD,8BAAC;CAAA;AARY,0DAAuB;;;;;;;;;;;;;;;ACvCpC;;GAEG;AACH,6IAA6F;AAC7F,mHAA+E;AAC/E,sHAAsE;AACtE,kGAAqD;AACrD,oGAA4C;AAE5C,kBAAe,IAAI,2BAAe,CAAC,cAAI;IACnC,sCAAsC;IACtC,IAAI,CAAC,4BAAmB,CAAC,CAAC,EAAE,CAAC,iDAA0B,CAAC,CAAC;IACzD,IAAI,CAAC,yBAAgB,CAAC,CAAC,EAAE,CAAC,8CAAuB,CAAC,CAAC;IACnD,IAAI,CAAC,kBAAS,CAAC,CAAC,cAAc,CAAC,iBAAO,IAAI,4CAA2B,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,sBAAa,CAAC,EAAzE,CAAyE,CAAC,CAAC,gBAAgB,EAAE,CAAC;AAC5I,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACdH,8GAA2B;;;;;;;;;;;;;;;;ACAd,qBAAa,GAAG,sBAAsB,CAAC;AAEvC,iBAAS,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC","file":"66.bundle.js","sourcesContent":["import { injectable, inject } from \"inversify\";\r\nimport { CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry, MessageService } from \"@theia/core/lib/common\";\r\nimport { CommonMenus } from \"@theia/core/lib/browser\";\r\nimport { MyService } from \"../common\";\r\n\r\nexport const ItrmextCommand = {\r\n    id: 'Itrmext.command',\r\n    label: \"Get Environment Variables\"\r\n};\r\n\r\n@injectable()\r\nexport class ItrmextCommandContribution implements CommandContribution {\r\n\r\n    constructor(\r\n        @inject(MessageService) private readonly messageService: MessageService,\r\n        @inject(MyService) protected readonly myService: MyService\r\n    ) { }\r\n\r\n    registerCommands(registry: CommandRegistry): void {\r\n        /*\r\n        - WSS debe estar arriba\r\n        - Nginx debe estar arriba\r\n        - El simulador tiene que cargarse\r\n        - Conectar al WSS\r\n        */\r\n        registry.registerCommand(ItrmextCommand, {\r\n            execute: async () => {\r\n                const connected = await this.myService.connectToWebsocket();\r\n                console.log(connected);\r\n                if(connected)\r\n                    this.messageService.info('Succesfully connected!');\r\n                else\r\n                    this.messageService.info('Connection error');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n@injectable()\r\nexport class ItrmextMenuContribution implements MenuContribution {\r\n\r\n    registerMenus(menus: MenuModelRegistry): void {\r\n        menus.registerMenuAction(CommonMenus.HELP, {\r\n            commandId: ItrmextCommand.id,\r\n            label: ItrmextCommand.label\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Generated using theia-extension-generator\r\n */\r\nimport { ItrmextCommandContribution, ItrmextMenuContribution } from './itrmext-contribution';\r\nimport { CommandContribution, MenuContribution } from \"@theia/core/lib/common\";\r\nimport { WebSocketConnectionProvider } from '@theia/core/lib/browser';\r\nimport { MyService, MyServicePath } from '../common';\r\nimport { ContainerModule } from \"inversify\";\r\n\r\nexport default new ContainerModule(bind => {\r\n    // add your contribution bindings here\r\n    bind(CommandContribution).to(ItrmextCommandContribution);\r\n    bind(MenuContribution).to(ItrmextMenuContribution);\r\n    bind(MyService).toDynamicValue(context => WebSocketConnectionProvider.createProxy(context.container, MyServicePath)).inSingletonScope();\r\n});\r\n","export * from './protocol';","export const MyServicePath = '/services/my-service';\r\n\r\nexport const MyService = Symbol('MyService');\r\nexport interface MyService {\r\n    getEnvVariables(): Promise<Readonly<{ [key:string]: string | undefined }>>\r\n    getSettingValue(): Promise<Readonly<{ [key:string]: string | undefined }>>\r\n    connectToWebsocket(): Promise<Readonly<Boolean | undefined>>\r\n}"],"sourceRoot":""}