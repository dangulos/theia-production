{"version":3,"sources":["webpack:///./node_modules/@theia/git/src/browser/prompt/git-prompt-module.ts","webpack:///./node_modules/@theia/git/src/common/git-prompt.ts"],"names":[],"mappings":"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","file":"73.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule, interfaces } from 'inversify';\nimport { WebSocketConnectionProvider } from '@theia/core/lib/browser/messaging/ws-connection-provider';\nimport { GitPrompt, GitPromptServer, GitPromptServerProxy, GitPromptServerImpl } from '../../common/git-prompt';\n\nexport default new ContainerModule(bind => {\n    bind(GitPrompt).toSelf();\n    bindPromptServer(bind);\n});\n\nexport function bindPromptServer(bind: interfaces.Bind): void {\n    bind(GitPromptServer).to(GitPromptServerImpl).inSingletonScope();\n    bind(GitPromptServerProxy).toDynamicValue(context => WebSocketConnectionProvider.createProxy(context.container, GitPrompt.WS_PATH)).inSingletonScope();\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { JsonRpcProxy } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\n\nexport const GitPromptServer = Symbol('GitPromptServer');\nexport interface GitPromptServer extends JsonRpcServer<GitPromptClient> {\n}\n\nexport const GitPromptServerProxy = Symbol('GitPromptServerProxy');\nexport interface GitPromptServerProxy extends JsonRpcProxy<GitPromptServer> {\n}\n\n@injectable()\nexport class GitPrompt implements GitPromptClient, Disposable {\n\n    @inject(GitPromptServer)\n    protected readonly server: GitPromptServer;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    @postConstruct()\n    protected init(): void {\n        this.server.setClient(this);\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    async ask(question: GitPrompt.Question): Promise<GitPrompt.Answer> {\n        return GitPrompt.Failure.create('Interactive Git prompt is not supported in the browser.');\n    }\n\n}\n\nexport namespace GitPrompt {\n\n    /**\n     * Unique WS endpoint path for the Git prompt service.\n     */\n    export const WS_PATH = 'services/git-prompt';\n\n    export interface Question {\n        readonly text: string;\n        readonly details?: string;\n        readonly password?: boolean;\n    }\n\n    export interface Answer {\n        readonly type: Answer.Type;\n    }\n\n    export interface Success {\n        readonly type: Answer.Type.SUCCESS;\n        readonly result: string | boolean;\n    }\n\n    export namespace Success {\n\n        export function is(answer: Answer): answer is Success {\n            return answer.type === Answer.Type.SUCCESS\n                && 'result' in answer\n                && ((typeof (answer as Success).result) === 'string' || (typeof (answer as Success).result) === 'boolean');\n        }\n\n        export function create(result: string | boolean): Success {\n            return {\n                type: Answer.Type.SUCCESS,\n                result\n            };\n        }\n\n    }\n\n    export interface Cancel extends Answer {\n        readonly type: Answer.Type.CANCEL;\n    }\n\n    export namespace Cancel {\n\n        export function is(answer: Answer): answer is Cancel {\n            return answer.type === Answer.Type.CANCEL;\n        }\n\n        export function create(): Cancel {\n            return {\n                type: Answer.Type.CANCEL\n            };\n        }\n\n    }\n\n    export interface Failure extends Answer {\n        readonly type: Answer.Type.FAILURE;\n        readonly error: string | Error;\n    }\n\n    export namespace Failure {\n\n        export function is(answer: Answer): answer is Failure {\n            return answer.type === Answer.Type.FAILURE\n                && 'error' in answer\n                && ((typeof (answer as Failure).error) === 'string' || (answer as Failure).error instanceof Error);\n        }\n\n        export function create(error: string | Error): Failure {\n            return {\n                type: Answer.Type.FAILURE,\n                error\n            };\n        }\n\n    }\n\n    export namespace Answer {\n\n        export enum Type {\n\n            SUCCESS,\n            CANCEL,\n            FAILURE\n\n        }\n\n    }\n\n}\n\nexport const GitPromptClient = Symbol('GitPromptClient');\nexport interface GitPromptClient {\n\n    ask(question: GitPrompt.Question): Promise<GitPrompt.Answer>;\n\n    // TODO: implement `confirm` with boolean return type.\n    // TODO: implement `select` with possible answers.\n\n}\n\n/**\n * Note: This implementation is not reconnecting.\n * Git prompting is not supported in the browser. In electron, there's no need to reconnect.\n */\n@injectable()\nexport class GitPromptServerImpl implements GitPromptServer {\n\n    @inject(GitPromptServerProxy)\n    protected readonly proxy: GitPromptServerProxy;\n\n    setClient(client: GitPromptClient): void {\n        this.proxy.setClient(client);\n    }\n\n    dispose(): void {\n        this.proxy.dispose();\n    }\n\n}\n"],"sourceRoot":""}