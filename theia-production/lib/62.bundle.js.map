{"version":3,"sources":["webpack:///./node_modules/@theia/terminal/src/browser/base/terminal-service.ts","webpack:///./node_modules/@theia/workspace/src/browser/index.ts","webpack:///./node_modules/itrmext/src/browser/itrmext-contribution.ts","webpack:///./node_modules/itrmext/src/browser/itrmext-frontend-module.ts","webpack:///./node_modules/itrmext/src/common/index.ts","webpack:///./node_modules/itrmext/src/common/protocol.ts"],"names":[],"mappings":"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","file":"62.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { Event } from '@theia/core/lib/common/event';\nimport { WidgetOpenerOptions } from '@theia/core/lib/browser';\nimport { TerminalWidgetOptions, TerminalWidget } from './terminal-widget';\n\n/**\n * Service manipulating terminal widgets.\n */\nexport const TerminalService = Symbol('TerminalService');\nexport interface TerminalService {\n\n    /**\n     * Create new terminal with predefined options.\n     * @param options - terminal options.\n     */\n    newTerminal(options: TerminalWidgetOptions): Promise<TerminalWidget>;\n\n    /**\n     * Display new terminal widget.\n     * @param terminal - widget to attach.\n     * @deprecated use #open\n     */\n    activateTerminal(terminal: TerminalWidget): void;\n\n    open(terminal: TerminalWidget, options?: WidgetOpenerOptions): void;\n\n    readonly all: TerminalWidget[];\n\n    /**\n     * @param id - the widget id (NOT the terminal id!)\n     * @return the widget\n     */\n    getById(id: string): TerminalWidget | undefined;\n\n    /**\n     * @param id - the terminal id (NOT the terminal widget id!)\n     * @return the widget\n     */\n    getByTerminalId(terminalId: number): TerminalWidget | undefined;\n\n    /**\n     * Returns detected default shell.\n     */\n    getDefaultShell(): Promise<string>;\n\n    readonly onDidCreateTerminal: Event<TerminalWidget>;\n\n    readonly currentTerminal: TerminalWidget | undefined;\n\n    readonly onDidChangeCurrentTerminal: Event<TerminalWidget | undefined>;\n\n    readonly lastUsedTerminal: TerminalWidget | undefined;\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './workspace-commands';\nexport * from './workspace-service';\nexport * from './workspace-frontend-contribution';\nexport * from './workspace-frontend-module';\nexport * from './workspace-preferences';\n","import { injectable, inject } from \"inversify\";\r\nimport { CommandContribution, CommandRegistry, MenuContribution, MenuModelRegistry, MessageService } from \"@theia/core/lib/common\";\r\nimport { CommonMenus } from \"@theia/core/lib/browser\";\r\nimport { MAIN_MENU_BAR } from '@theia/core/lib/common/menu';\r\n\r\nexport namespace ITRMCommonMenus {\r\n    export const SIMULATOR = [...MAIN_MENU_BAR, '8_simulator'];\r\n};\r\n\r\nimport { MyService } from \"../common\";\r\n\r\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\r\nimport { WorkspaceService } from '@theia/workspace/lib/browser';\r\nimport { TerminalService } from '@theia/terminal/lib/browser/base/terminal-service';\r\n\r\n//import { /*TerminalProcessFactory, TerminalProcess,*/ ProcessManager  } from '@theia/process/lib/node';\r\nimport { MiniBrowserOpenHandler } from \"@theia/mini-browser/lib/browser/mini-browser-open-handler\";\r\n\r\nexport const ItrmextCommand = {\r\n    id: 'Itrmext.command',\r\n    label: \"Get Environment Variables\"\r\n};\r\n\r\nexport const ItrmextTradingView = {\r\n    id: 'Itrmext.tradingview',\r\n    label: \"Preview in Trading View\"\r\n}\r\n\r\n@injectable()\r\nexport class ItrmextCommandContribution implements CommandContribution {\r\n    \r\n    @inject(FrontendApplicationStateService)\r\n    protected readonly stateService: FrontendApplicationStateService;\r\n    @inject(WorkspaceService)\r\n    protected readonly workspaceService: WorkspaceService;\r\n    @inject(TerminalService)\r\n    protected readonly terminalService: TerminalService;\r\n    @inject(MiniBrowserOpenHandler) \r\n    protected readonly miniBrowserOpenHandler: MiniBrowserOpenHandler\r\n    /*\r\n    @inject(TerminalProcessFactory)\r\n    protected readonly terminalProcessFactory: TerminalProcessFactory;\r\n    @inject(TerminalProcess)\r\n    protected readonly terminalProcess: TerminalProcess;\r\n    @inject(ProcessManager)\r\n    protected readonly processManager: ProcessManager;\r\n    */\r\n\r\n    constructor(\r\n        @inject(MessageService) private readonly messageService: MessageService,\r\n        @inject(MyService) protected readonly myService: MyService\r\n    ) { }\r\n\r\n    executeTerminalPromise(){\r\n        return new Promise ((res,rej)=>{\r\n          this.executeTerminal().then(()=>{\r\n              res(\"OK\");\r\n          }).catch(()=>{\r\n              rej(\"error\");\r\n          })\r\n        })\r\n    }\r\n\r\n    async executeTerminal(){\r\n\r\n        this.messageService.info(\"Executing terminal\");\r\n        let terminalWidget = await this.terminalService.newTerminal({});\r\n        let terminalId = await terminalWidget.start();\r\n        await this.terminalService.activateTerminal(terminalWidget);\r\n        let comm = \"cd c:/Users/dangu/OneDrive/Documentos/ITRM/INNPULSA/temp/theia-production/Server/tradingview-chart-test\\r\\n\"\r\n        comm += \"npx serve\\r\\n\"\r\n        await terminalWidget.sendText(comm);\r\n        let processId = await terminalWidget.processId;\r\n        this.messageService.info(\"Node (temptative) Started with \"+processId);\r\n        /*\r\n        let process = this.processManager.get(processId);\r\n        process?.outputStream.on('data', (data)=>{\r\n            this.messageService.info(data + \" | type: \"+ typeof data);\r\n        });\r\n        */\r\n        //contact the process\r\n        this.createMiniBrowserPreview().then((a: string)=>{\r\n            this.messageService.info(a + \"Started on \"+terminalId);\r\n        }).catch((b: string)=>{\r\n            this.messageService.info(b+ \"Failed on \"+terminalId);\r\n        })\r\n    }\r\n\r\n    \r\n    createMiniBrowserPreview(){\r\n        return new Promise((res, rej)=>{\r\n            //let uri = new URI(\"http://localhost:3001\");\r\n            this.miniBrowserOpenHandler.openPreview(\"http://localhost:5000\").then((a)=>{\r\n                this.messageService.info(\"TradingView Opened at port 5000\"+JSON.stringify(a));\r\n                res(\"OK\");\r\n            }).catch((b)=>{\r\n                this.messageService.info(\"There was a mistake \"+ JSON.stringify(b));\r\n                rej(\"rejected\");\r\n            })\r\n        });\r\n    }\r\n\r\n    registerCommands(registry: CommandRegistry): void {\r\n        /*\r\n        - WSS debe estar arriba\r\n        - Nginx debe estar arriba\r\n        - El simulador tiene que cargarse\r\n        - Conectar al WSS\r\n        */\r\n        registry.registerCommand(ItrmextCommand, {\r\n            execute: async () => {\r\n                const connected = await this.myService.connectToWebsocket();\r\n                console.log(connected);\r\n                if(connected)\r\n                    this.messageService.info('Succesfully connected!');\r\n                else\r\n                    this.messageService.info('Connection error');\r\n            }\r\n        });\r\n\r\n        registry.registerCommand(ItrmextTradingView, {\r\n            execute: async () => {\r\n                const connected = await this.executeTerminalPromise();\r\n                console.log(connected);\r\n                if(connected)\r\n                    this.messageService.info('TradingView is running');\r\n                else\r\n                    this.messageService.info('There was a problem');\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\n@injectable()\r\nexport class ItrmextMenuContribution implements MenuContribution {\r\n\r\n    registerMenus(menus: MenuModelRegistry): void {\r\n\r\n        console.log('CommonMenus==>>',CommonMenus);\r\n\r\n        menus.registerSubmenu(ITRMCommonMenus.SIMULATOR, 'Simulator');\r\n\r\n        menus.registerMenuAction(ITRMCommonMenus.SIMULATOR, {\r\n            commandId: ItrmextCommand.id,\r\n            label: ItrmextCommand.label\r\n        });\r\n\r\n        menus.registerMenuAction(ITRMCommonMenus.SIMULATOR, {\r\n            commandId: ItrmextTradingView.id,\r\n            label: ItrmextTradingView.label\r\n        });\r\n    }\r\n}","/**\r\n * Generated using theia-extension-generator\r\n */\r\nimport { ItrmextCommandContribution, ItrmextMenuContribution } from './itrmext-contribution';\r\nimport { CommandContribution, MenuContribution } from \"@theia/core/lib/common\";\r\nimport { WebSocketConnectionProvider } from '@theia/core/lib/browser';\r\nimport { MyService, MyServicePath } from '../common';\r\nimport { ContainerModule } from \"inversify\";\r\n\r\nexport default new ContainerModule(bind => {\r\n    // add your contribution bindings here\r\n    bind(CommandContribution).to(ItrmextCommandContribution);\r\n    bind(MenuContribution).to(ItrmextMenuContribution);\r\n    bind(MyService).toDynamicValue(context => WebSocketConnectionProvider.createProxy(context.container, MyServicePath)).inSingletonScope();\r\n});\r\n","export * from './protocol';","export const MyServicePath = '/services/my-service';\r\n\r\nexport const MyService = Symbol('MyService');\r\nexport interface MyService {\r\n    getEnvVariables(): Promise<Readonly<{ [key:string]: string | undefined }>>\r\n    getSettingValue(): Promise<Readonly<{ [key:string]: string | undefined }>>\r\n    connectToWebsocket(): Promise<Readonly<Boolean | undefined>>\r\n}"],"sourceRoot":""}